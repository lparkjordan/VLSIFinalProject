logic [3:0] expectedCols; // expected outputs
logic [6:0] expectedSeg;
logic [1:0] expectedMulti;

logic [26:0] testvectors[10000:0];
logic [31:0] vectornum, errors;

//instantiate device under test
//core dut(enable1, enable2, keypadCols, seg, keypadNswitchinput, keypadRows, ph1, ph2, reset, switch1, switch2);

//generate clock(s)
always
begin
ph1 = 0; ph2 = 0; #2; 
ph1 = 1; # 8; 
ph1 = 0; #2; 
ph2 = 1; # 8;
end

//at start of test, load vectors and pulse reset
initial
	begin
		$readmemb ("e155asic_core.tv", testvectors);
		vectornum = 0; errors = 0;
		reset <= 1; #41; reset <= 0;
	end

// apply test vectors on rising edge of clock phase 1
always @ (posedge ph1)
	begin
		#1; 
		{keypadNswitchinput, switch1, switch2, keypadRows, expectedCols, expectedSeg, expectedMulti} = testvectors[vectornum];
	end

// check results on falling edge of clock phase 2
always @ (negedge ph2)
begin
	if(~reset) begin //skip during reset
		if(keypadCols !== expectedCols || seg !== expectedSeg || {enable1, enable2} !== expectedMulti) begin
			$display("Error on line %d: inputs = %h", vectornum+1, {keypadNswitchinput, switch1, switch2, keypadRows});
			$display(" outputs = %h (%h expected)", {keypadCols, seg, enable1, enable2}, {expectedCols, expectedSeg, expectedMulti});
			errors = errors + 1;
		end
		vectornum = vectornum + 1;
	end
	if(testvectors[vectornum] === 27'bx) begin
		$display("%d tests completed with %d errors", vectornum, errors);
		$stop;
	end
end
